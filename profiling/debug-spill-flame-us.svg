<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (10 samples, 0.14%)</title><rect x="0.0273%" y="293" width="0.1363%" height="15" fill="rgb(227,0,7)"/><text x="0.2773%" y="303.50"></text></g><g><title>__GI__IO_sgetn (10 samples, 0.14%)</title><rect x="0.0273%" y="277" width="0.1363%" height="15" fill="rgb(217,0,24)"/><text x="0.2773%" y="287.50"></text></g><g><title>__GI__IO_file_seekoff (23 samples, 0.31%)</title><rect x="0.2181%" y="277" width="0.3136%" height="15" fill="rgb(221,193,54)"/><text x="0.4681%" y="287.50"></text></g><g><title>file_back_buffer::back (8 samples, 0.11%)</title><rect x="0.5590%" y="277" width="0.1091%" height="15" fill="rgb(248,212,6)"/><text x="0.8090%" y="287.50"></text></g><g><title>file_back_buffer::pop_n (20 samples, 0.27%)</title><rect x="0.6680%" y="277" width="0.2727%" height="15" fill="rgb(208,68,35)"/><text x="0.9180%" y="287.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::size (15 samples, 0.20%)</title><rect x="1.0225%" y="277" width="0.2045%" height="15" fill="rgb(232,128,0)"/><text x="1.2725%" y="287.50"></text></g><g><title>std::_Head_base&lt;0ul, file_back_buffer::impl*, false&gt;::_M_head (13 samples, 0.18%)</title><rect x="1.4042%" y="277" width="0.1772%" height="15" fill="rgb(207,160,47)"/><text x="1.6542%" y="287.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_head (23 samples, 0.31%)</title><rect x="1.5951%" y="277" width="0.3136%" height="15" fill="rgb(228,23,34)"/><text x="1.8451%" y="287.50"></text></g><g><title>std::__get_helper&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (8 samples, 0.11%)</title><rect x="1.9359%" y="277" width="0.1091%" height="15" fill="rgb(218,30,26)"/><text x="2.1859%" y="287.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (16 samples, 0.22%)</title><rect x="2.0995%" y="277" width="0.2181%" height="15" fill="rgb(220,122,19)"/><text x="2.3495%" y="287.50"></text></g><g><title>std::get&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (31 samples, 0.42%)</title><rect x="2.3313%" y="277" width="0.4226%" height="15" fill="rgb(250,228,42)"/><text x="2.5813%" y="287.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::get (22 samples, 0.30%)</title><rect x="2.7948%" y="277" width="0.2999%" height="15" fill="rgb(240,193,28)"/><text x="3.0448%" y="287.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::operator (24 samples, 0.33%)</title><rect x="3.0948%" y="277" width="0.3272%" height="15" fill="rgb(216,20,37)"/><text x="3.3448%" y="287.50"></text></g><g><title> (24 samples, 0.33%)</title><rect x="3.0948%" y="261" width="0.3272%" height="15" fill="rgb(206,188,39)"/><text x="3.3448%" y="271.50"></text></g><g><title>[[stack]] (250 samples, 3.41%)</title><rect x="0.1636%" y="293" width="3.4083%" height="15" fill="rgb(217,207,13)"/><text x="0.4136%" y="303.50">[[s..</text></g><g><title>_IO_file_xsgetn (14 samples, 0.19%)</title><rect x="3.5855%" y="277" width="0.1909%" height="15" fill="rgb(231,73,38)"/><text x="3.8355%" y="287.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::back (12 samples, 0.16%)</title><rect x="3.8446%" y="277" width="0.1636%" height="15" fill="rgb(225,20,46)"/><text x="4.0946%" y="287.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::pop_back (11 samples, 0.15%)</title><rect x="4.0082%" y="277" width="0.1500%" height="15" fill="rgb(210,31,41)"/><text x="4.2582%" y="287.50"></text></g><g><title>[anon] (55 samples, 0.75%)</title><rect x="3.5719%" y="293" width="0.7498%" height="15" fill="rgb(221,200,47)"/><text x="3.8219%" y="303.50"></text></g><g><title>_IO_file_xsgetn (13 samples, 0.18%)</title><rect x="4.3899%" y="277" width="0.1772%" height="15" fill="rgb(226,26,5)"/><text x="4.6399%" y="287.50"></text></g><g><title>__GI__IO_file_seekoff (35 samples, 0.48%)</title><rect x="4.6353%" y="277" width="0.4772%" height="15" fill="rgb(249,33,26)"/><text x="4.8853%" y="287.50"></text></g><g><title>__GI__IO_fread (15 samples, 0.20%)</title><rect x="5.1125%" y="277" width="0.2045%" height="15" fill="rgb(235,183,28)"/><text x="5.3625%" y="287.50"></text></g><g><title>__GI__IO_free_backup_area (12 samples, 0.16%)</title><rect x="5.3170%" y="277" width="0.1636%" height="15" fill="rgb(221,5,38)"/><text x="5.5670%" y="287.50"></text></g><g><title>__GI__IO_sgetn (9 samples, 0.12%)</title><rect x="5.5215%" y="277" width="0.1227%" height="15" fill="rgb(247,18,42)"/><text x="5.7715%" y="287.50"></text></g><g><title>__GI___fxstat (46 samples, 0.63%)</title><rect x="5.6442%" y="277" width="0.6271%" height="15" fill="rgb(241,131,45)"/><text x="5.8942%" y="287.50"></text></g><g><title>__GI___libc_free (13 samples, 0.18%)</title><rect x="6.2713%" y="277" width="0.1772%" height="15" fill="rgb(249,31,29)"/><text x="6.5213%" y="287.50"></text></g><g><title>__GI_fseek (14 samples, 0.19%)</title><rect x="6.4485%" y="277" width="0.1909%" height="15" fill="rgb(225,111,53)"/><text x="6.6985%" y="287.50"></text></g><g><title>__ftruncate (60 samples, 0.82%)</title><rect x="6.6394%" y="277" width="0.8180%" height="15" fill="rgb(238,160,17)"/><text x="6.8894%" y="287.50"></text></g><g><title>__lseek64 (47 samples, 0.64%)</title><rect x="7.4574%" y="277" width="0.6408%" height="15" fill="rgb(214,148,48)"/><text x="7.7074%" y="287.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::pop_back (11 samples, 0.15%)</title><rect x="8.0982%" y="277" width="0.1500%" height="15" fill="rgb(232,36,49)"/><text x="8.3482%" y="287.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_head (8 samples, 0.11%)</title><rect x="8.4254%" y="277" width="0.1091%" height="15" fill="rgb(209,103,24)"/><text x="8.6754%" y="287.50"></text></g><g><title>std::__get_helper&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (18 samples, 0.25%)</title><rect x="8.5344%" y="277" width="0.2454%" height="15" fill="rgb(229,88,8)"/><text x="8.7844%" y="287.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (18 samples, 0.25%)</title><rect x="8.8071%" y="277" width="0.2454%" height="15" fill="rgb(213,181,19)"/><text x="9.0571%" y="287.50"></text></g><g><title>std::get&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (17 samples, 0.23%)</title><rect x="9.1479%" y="277" width="0.2318%" height="15" fill="rgb(254,191,54)"/><text x="9.3979%" y="287.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::get (9 samples, 0.12%)</title><rect x="9.3797%" y="277" width="0.1227%" height="15" fill="rgb(241,83,37)"/><text x="9.6297%" y="287.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::operator (15 samples, 0.20%)</title><rect x="9.5024%" y="277" width="0.2045%" height="15" fill="rgb(233,36,39)"/><text x="9.7524%" y="287.50"></text></g><g><title> (15 samples, 0.20%)</title><rect x="9.5024%" y="261" width="0.2045%" height="15" fill="rgb(226,3,54)"/><text x="9.7524%" y="271.50"></text></g><g><title>[unknown] (396 samples, 5.40%)</title><rect x="4.3626%" y="293" width="5.3988%" height="15" fill="rgb(245,192,40)"/><text x="4.6126%" y="303.50">[unknow..</text></g><g><title>minmax_t&lt;float, work::xshuffle_ip&lt;true&gt;(char const*)::{lambda(float)#1}&gt; (14 samples, 0.19%)</title><rect x="9.9523%" y="213" width="0.1909%" height="15" fill="rgb(238,167,29)"/><text x="10.2023%" y="223.50"></text></g><g><title>minmax_t&lt;signed char&gt; (24 samples, 0.33%)</title><rect x="10.2249%" y="213" width="0.3272%" height="15" fill="rgb(232,182,51)"/><text x="10.4749%" y="223.50"></text></g><g><title>minmax_t&lt;signed char, minmax_t&lt;signed char&gt;(span&lt;signed char&gt; const&amp;)::{lambda(signed char)#1}&gt; (24 samples, 0.33%)</title><rect x="10.2249%" y="197" width="0.3272%" height="15" fill="rgb(231,60,39)"/><text x="10.4749%" y="207.50"></text></g><g><title>span&lt;signed char&gt;::operator[] (8 samples, 0.11%)</title><rect x="10.4431%" y="181" width="0.1091%" height="15" fill="rgb(208,69,12)"/><text x="10.6931%" y="191.50"></text></g><g><title>[libm-2.32.so] (22 samples, 0.30%)</title><rect x="10.7839%" y="133" width="0.2999%" height="15" fill="rgb(235,93,37)"/><text x="11.0339%" y="143.50"></text></g><g><title>rng::frng::dot&lt;2ul&gt; (27 samples, 0.37%)</title><rect x="11.0838%" y="133" width="0.3681%" height="15" fill="rgb(213,116,39)"/><text x="11.3338%" y="143.50"></text></g><g><title>std::array&lt;double, 2ul&gt;::operator[] (12 samples, 0.16%)</title><rect x="11.2883%" y="117" width="0.1636%" height="15" fill="rgb(222,207,29)"/><text x="11.5383%" y="127.50"></text></g><g><title>rng::frng::sample_double (60 samples, 0.82%)</title><rect x="10.7294%" y="149" width="0.8180%" height="15" fill="rgb(206,96,30)"/><text x="10.9794%" y="159.50"></text></g><g><title>[libm-2.32.so] (52 samples, 0.71%)</title><rect x="11.8064%" y="117" width="0.7089%" height="15" fill="rgb(218,138,4)"/><text x="12.0564%" y="127.50"></text></g><g><title>rng::frng::dot&lt;2ul&gt; (57 samples, 0.78%)</title><rect x="12.5153%" y="117" width="0.7771%" height="15" fill="rgb(250,191,14)"/><text x="12.7653%" y="127.50"></text></g><g><title>std::array&lt;double, 2ul&gt;::operator[] (29 samples, 0.40%)</title><rect x="12.8971%" y="101" width="0.3954%" height="15" fill="rgb(239,60,40)"/><text x="13.1471%" y="111.50"></text></g><g><title>std::__array_traits&lt;double, 2ul&gt;::_S_ref (15 samples, 0.20%)</title><rect x="13.0879%" y="85" width="0.2045%" height="15" fill="rgb(206,27,48)"/><text x="13.3379%" y="95.50"></text></g><g><title>rng::frng::fract (14 samples, 0.19%)</title><rect x="13.2924%" y="117" width="0.1909%" height="15" fill="rgb(225,35,8)"/><text x="13.5424%" y="127.50"></text></g><g><title>rng::frng::sample_double (139 samples, 1.90%)</title><rect x="11.6564%" y="133" width="1.8950%" height="15" fill="rgb(250,213,24)"/><text x="11.9064%" y="143.50">r..</text></g><g><title>RNG::next_long (216 samples, 2.94%)</title><rect x="10.6885%" y="197" width="2.9448%" height="15" fill="rgb(247,123,22)"/><text x="10.9385%" y="207.50">RN..</text></g><g><title>RNG::next_long (215 samples, 2.93%)</title><rect x="10.7021%" y="181" width="2.9312%" height="15" fill="rgb(231,138,38)"/><text x="10.9521%" y="191.50">RN..</text></g><g><title>rng::frng::sample (213 samples, 2.90%)</title><rect x="10.7294%" y="165" width="2.9039%" height="15" fill="rgb(231,145,46)"/><text x="10.9794%" y="175.50">rn..</text></g><g><title>rng::frng::update_state (153 samples, 2.09%)</title><rect x="11.5474%" y="149" width="2.0859%" height="15" fill="rgb(251,118,11)"/><text x="11.7974%" y="159.50">r..</text></g><g><title>std::__uniq_ptr_impl&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::_M_ptr (8 samples, 0.11%)</title><rect x="13.8241%" y="149" width="0.1091%" height="15" fill="rgb(217,147,25)"/><text x="14.0741%" y="159.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::back (25 samples, 0.34%)</title><rect x="13.6469%" y="197" width="0.3408%" height="15" fill="rgb(247,81,37)"/><text x="13.8969%" y="207.50"></text></g><g><title>std::unique_ptr&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::operator* (13 samples, 0.18%)</title><rect x="13.8105%" y="181" width="0.1772%" height="15" fill="rgb(209,12,38)"/><text x="14.0605%" y="191.50"></text></g><g><title>std::unique_ptr&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::get (13 samples, 0.18%)</title><rect x="13.8105%" y="165" width="0.1772%" height="15" fill="rgb(227,1,9)"/><text x="14.0605%" y="175.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::push_back (19 samples, 0.26%)</title><rect x="14.0695%" y="197" width="0.2590%" height="15" fill="rgb(248,47,43)"/><text x="14.3195%" y="207.50"></text></g><g><title>std::unique_ptr&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::operator* (8 samples, 0.11%)</title><rect x="14.2195%" y="181" width="0.1091%" height="15" fill="rgb(221,10,30)"/><text x="14.4695%" y="191.50"></text></g><g><title>std::unique_ptr&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::get (8 samples, 0.11%)</title><rect x="14.2195%" y="165" width="0.1091%" height="15" fill="rgb(210,229,1)"/><text x="14.4695%" y="175.50"></text></g><g><title>std::swap&lt;float&gt; (81 samples, 1.10%)</title><rect x="14.4513%" y="197" width="1.1043%" height="15" fill="rgb(222,148,37)"/><text x="14.7013%" y="207.50"></text></g><g><title>rng::unshuffle&lt;float, rng::frng&gt; (370 samples, 5.04%)</title><rect x="10.5521%" y="213" width="5.0443%" height="15" fill="rgb(234,67,33)"/><text x="10.8021%" y="223.50">rng::u..</text></g><g><title>RNG::next_long (17 samples, 0.23%)</title><rect x="15.6237%" y="197" width="0.2318%" height="15" fill="rgb(247,98,35)"/><text x="15.8737%" y="207.50"></text></g><g><title>RNG::next_long (15 samples, 0.20%)</title><rect x="15.6510%" y="181" width="0.2045%" height="15" fill="rgb(247,138,52)"/><text x="15.9010%" y="191.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::back (11 samples, 0.15%)</title><rect x="15.8691%" y="197" width="0.1500%" height="15" fill="rgb(213,79,30)"/><text x="16.1191%" y="207.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::push_back (13 samples, 0.18%)</title><rect x="16.0464%" y="197" width="0.1772%" height="15" fill="rgb(246,177,23)"/><text x="16.2964%" y="207.50"></text></g><g><title>std::swap&lt;long&gt; (41 samples, 0.56%)</title><rect x="16.2645%" y="197" width="0.5590%" height="15" fill="rgb(230,62,27)"/><text x="16.5145%" y="207.50"></text></g><g><title>rng::unshuffle&lt;long, rng::xoroshiro128plus&gt; (92 samples, 1.25%)</title><rect x="15.5965%" y="213" width="1.2543%" height="15" fill="rgb(216,154,8)"/><text x="15.8465%" y="223.50"></text></g><g><title>[libm-2.32.so] (11 samples, 0.15%)</title><rect x="18.6367%" y="165" width="0.1500%" height="15" fill="rgb(244,35,45)"/><text x="18.8867%" y="175.50"></text></g><g><title>rand_r (12 samples, 0.16%)</title><rect x="19.3592%" y="149" width="0.1636%" height="15" fill="rgb(251,115,12)"/><text x="19.6092%" y="159.50"></text></g><g><title>RNG::next_long (92 samples, 1.25%)</title><rect x="18.2958%" y="197" width="1.2543%" height="15" fill="rgb(240,54,50)"/><text x="18.5458%" y="207.50"></text></g><g><title>RNG::next_long (88 samples, 1.20%)</title><rect x="18.3504%" y="181" width="1.1997%" height="15" fill="rgb(233,84,52)"/><text x="18.6004%" y="191.50"></text></g><g><title>rng::drng::sample (56 samples, 0.76%)</title><rect x="18.7866%" y="165" width="0.7635%" height="15" fill="rgb(207,117,47)"/><text x="19.0366%" y="175.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::pop_back (11 samples, 0.15%)</title><rect x="19.6046%" y="197" width="0.1500%" height="15" fill="rgb(249,43,39)"/><text x="19.8546%" y="207.50"></text></g><g><title>_IO_file_xsgetn (59 samples, 0.80%)</title><rect x="28.0982%" y="117" width="0.8044%" height="15" fill="rgb(209,38,44)"/><text x="28.3482%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.26%)</title><rect x="28.6435%" y="101" width="0.2590%" height="15" fill="rgb(236,212,23)"/><text x="28.8935%" y="111.50"></text></g><g><title>__GI__IO_fread (157 samples, 2.14%)</title><rect x="26.9530%" y="133" width="2.1404%" height="15" fill="rgb(242,79,21)"/><text x="27.2030%" y="143.50">_..</text></g><g><title>__GI__IO_sgetn (14 samples, 0.19%)</title><rect x="28.9025%" y="117" width="0.1909%" height="15" fill="rgb(211,96,35)"/><text x="29.1525%" y="127.50"></text></g><g><title>_IO_seekoff_unlocked (48 samples, 0.65%)</title><rect x="33.8105%" y="117" width="0.6544%" height="15" fill="rgb(253,215,40)"/><text x="34.0605%" y="127.50"></text></g><g><title>__GI__IO_file_stat (9 samples, 0.12%)</title><rect x="37.1779%" y="101" width="0.1227%" height="15" fill="rgb(211,81,21)"/><text x="37.4279%" y="111.50"></text></g><g><title>[libc-2.32.so] (8 samples, 0.11%)</title><rect x="37.8323%" y="85" width="0.1091%" height="15" fill="rgb(208,190,38)"/><text x="38.0823%" y="95.50"></text></g><g><title>__GI__IO_free_backup_area (132 samples, 1.80%)</title><rect x="37.3006%" y="101" width="1.7996%" height="15" fill="rgb(235,213,38)"/><text x="37.5506%" y="111.50">_..</text></g><g><title>__GI___libc_free (85 samples, 1.16%)</title><rect x="37.9414%" y="85" width="1.1588%" height="15" fill="rgb(237,122,38)"/><text x="38.1914%" y="95.50"></text></g><g><title>__GI___fxstat (271 samples, 3.69%)</title><rect x="39.1002%" y="101" width="3.6946%" height="15" fill="rgb(244,218,35)"/><text x="39.3502%" y="111.50">__GI..</text></g><g><title>__GI_fseek (1,275 samples, 17.38%)</title><rect x="29.0934%" y="133" width="17.3824%" height="15" fill="rgb(240,68,47)"/><text x="29.3434%" y="143.50">__GI_fseek</text></g><g><title>__GI__IO_file_seekoff (881 samples, 12.01%)</title><rect x="34.4649%" y="117" width="12.0109%" height="15" fill="rgb(210,16,53)"/><text x="34.7149%" y="127.50">__GI__IO_file_seek..</text></g><g><title>__lseek64 (267 samples, 3.64%)</title><rect x="42.8357%" y="101" width="3.6401%" height="15" fill="rgb(235,124,12)"/><text x="43.0857%" y="111.50">__ls..</text></g><g><title>fvec_get_whole_buffer (1,680 samples, 22.90%)</title><rect x="23.8173%" y="149" width="22.9039%" height="15" fill="rgb(224,169,11)"/><text x="24.0673%" y="159.50">fvec_get_whole_buffer</text></g><g><title>fseek@plt (13 samples, 0.18%)</title><rect x="46.5440%" y="133" width="0.1772%" height="15" fill="rgb(250,166,2)"/><text x="46.7940%" y="143.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::get (20 samples, 0.27%)</title><rect x="46.7212%" y="149" width="0.2727%" height="15" fill="rgb(242,216,29)"/><text x="46.9712%" y="159.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (38 samples, 0.52%)</title><rect x="47.1984%" y="117" width="0.5181%" height="15" fill="rgb(230,116,27)"/><text x="47.4484%" y="127.50"></text></g><g><title>std::__get_helper&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (10 samples, 0.14%)</title><rect x="48.2618%" y="85" width="0.1363%" height="15" fill="rgb(228,99,48)"/><text x="48.5118%" y="95.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_head (12 samples, 0.16%)</title><rect x="48.7389%" y="69" width="0.1636%" height="15" fill="rgb(253,11,6)"/><text x="48.9889%" y="79.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (179 samples, 2.44%)</title><rect x="47.9346%" y="101" width="2.4404%" height="15" fill="rgb(247,143,39)"/><text x="48.1846%" y="111.50">st..</text></g><g><title>std::get&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (145 samples, 1.98%)</title><rect x="48.3981%" y="85" width="1.9768%" height="15" fill="rgb(236,97,10)"/><text x="48.6481%" y="95.50">s..</text></g><g><title>std::__get_helper&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (108 samples, 1.47%)</title><rect x="48.9025%" y="69" width="1.4724%" height="15" fill="rgb(233,208,19)"/><text x="49.1525%" y="79.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_head (76 samples, 1.04%)</title><rect x="49.3388%" y="53" width="1.0361%" height="15" fill="rgb(216,164,2)"/><text x="49.5888%" y="63.50"></text></g><g><title>std::_Head_base&lt;0ul, file_back_buffer::impl*, false&gt;::_M_head (41 samples, 0.56%)</title><rect x="49.8160%" y="37" width="0.5590%" height="15" fill="rgb(220,129,5)"/><text x="50.0660%" y="47.50"></text></g><g><title>file_back_buffer::back (2,034 samples, 27.73%)</title><rect x="23.0130%" y="165" width="27.7301%" height="15" fill="rgb(242,17,10)"/><text x="23.2630%" y="175.50">file_back_buffer::back</text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::operator (275 samples, 3.75%)</title><rect x="46.9939%" y="149" width="3.7491%" height="15" fill="rgb(242,107,0)"/><text x="47.2439%" y="159.50">std:..</text></g><g><title> (275 samples, 3.75%)</title><rect x="46.9939%" y="133" width="3.7491%" height="15" fill="rgb(251,28,31)"/><text x="47.2439%" y="143.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::get (222 samples, 3.03%)</title><rect x="47.7164%" y="117" width="3.0266%" height="15" fill="rgb(233,223,10)"/><text x="47.9664%" y="127.50">std..</text></g><g><title>std::get&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (27 samples, 0.37%)</title><rect x="50.3749%" y="101" width="0.3681%" height="15" fill="rgb(215,21,27)"/><text x="50.6249%" y="111.50"></text></g><g><title>fvec_get_whole_buffer (14 samples, 0.19%)</title><rect x="50.7430%" y="165" width="0.1909%" height="15" fill="rgb(232,23,21)"/><text x="50.9930%" y="175.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::operator (32 samples, 0.44%)</title><rect x="50.9339%" y="165" width="0.4363%" height="15" fill="rgb(244,5,23)"/><text x="51.1839%" y="175.50"></text></g><g><title> (32 samples, 0.44%)</title><rect x="50.9339%" y="149" width="0.4363%" height="15" fill="rgb(226,81,46)"/><text x="51.1839%" y="159.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::back (2,252 samples, 30.70%)</title><rect x="21.9496%" y="181" width="30.7021%" height="15" fill="rgb(247,70,30)"/><text x="22.1996%" y="191.50">file_vector&lt;unsigned long&gt;::back</text></g><g><title>std::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt;::operator[] (94 samples, 1.28%)</title><rect x="51.3701%" y="165" width="1.2815%" height="15" fill="rgb(212,68,19)"/><text x="51.6201%" y="175.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::size (8 samples, 0.11%)</title><rect x="52.6517%" y="181" width="0.1091%" height="15" fill="rgb(240,187,13)"/><text x="52.9017%" y="191.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::size (36 samples, 0.49%)</title><rect x="52.7607%" y="181" width="0.4908%" height="15" fill="rgb(223,113,26)"/><text x="53.0107%" y="191.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::size (16 samples, 0.22%)</title><rect x="53.0334%" y="165" width="0.2181%" height="15" fill="rgb(206,192,2)"/><text x="53.2834%" y="175.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::back (2,475 samples, 33.74%)</title><rect x="19.8364%" y="197" width="33.7423%" height="15" fill="rgb(241,108,4)"/><text x="20.0864%" y="207.50">fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::back</text></g><g><title>std::unique_ptr&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::operator* (15 samples, 0.20%)</title><rect x="53.3742%" y="181" width="0.2045%" height="15" fill="rgb(247,173,49)"/><text x="53.6242%" y="191.50"></text></g><g><title>std::unique_ptr&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::get (14 samples, 0.19%)</title><rect x="53.3879%" y="165" width="0.1909%" height="15" fill="rgb(224,114,35)"/><text x="53.6379%" y="175.50"></text></g><g><title>std::__uniq_ptr_impl&lt;std::array&lt;unsigned long, 10485760ul&gt;, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::_M_ptr (14 samples, 0.19%)</title><rect x="53.3879%" y="149" width="0.1909%" height="15" fill="rgb(245,159,27)"/><text x="53.6379%" y="159.50"></text></g><g><title>std::get&lt;0ul, std::array&lt;unsigned long, 10485760ul&gt;*, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt; (13 samples, 0.18%)</title><rect x="53.4015%" y="133" width="0.1772%" height="15" fill="rgb(245,172,44)"/><text x="53.6515%" y="143.50"></text></g><g><title>std::__get_helper&lt;0ul, std::array&lt;unsigned long, 10485760ul&gt;*, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt; (10 samples, 0.14%)</title><rect x="53.4424%" y="117" width="0.1363%" height="15" fill="rgb(236,23,11)"/><text x="53.6924%" y="127.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, std::array&lt;unsigned long, 10485760ul&gt;*, std::default_delete&lt;std::array&lt;unsigned long, 10485760ul&gt; &gt; &gt;::_M_head (9 samples, 0.12%)</title><rect x="53.4560%" y="101" width="0.1227%" height="15" fill="rgb(205,117,38)"/><text x="53.7060%" y="111.50"></text></g><g><title>file_back_buffer::pop_n (24 samples, 0.33%)</title><rect x="54.7376%" y="181" width="0.3272%" height="15" fill="rgb(237,72,25)"/><text x="54.9876%" y="191.50"></text></g><g><title>__GI___fileno (10 samples, 0.14%)</title><rect x="59.4547%" y="133" width="0.1363%" height="15" fill="rgb(244,70,9)"/><text x="59.7047%" y="143.50"></text></g><g><title>__ftruncate (256 samples, 3.49%)</title><rect x="59.5910%" y="133" width="3.4901%" height="15" fill="rgb(217,125,39)"/><text x="59.8410%" y="143.50">__f..</text></g><g><title>fileno@plt (8 samples, 0.11%)</title><rect x="63.0811%" y="133" width="0.1091%" height="15" fill="rgb(235,36,10)"/><text x="63.3311%" y="143.50"></text></g><g><title>fvec_pop_end (454 samples, 6.19%)</title><rect x="57.0552%" y="149" width="6.1895%" height="15" fill="rgb(251,123,47)"/><text x="57.3052%" y="159.50">fvec_pop..</text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::get (16 samples, 0.22%)</title><rect x="63.2447%" y="149" width="0.2181%" height="15" fill="rgb(221,13,13)"/><text x="63.4947%" y="159.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (20 samples, 0.27%)</title><rect x="63.7082%" y="117" width="0.2727%" height="15" fill="rgb(238,131,9)"/><text x="63.9582%" y="127.50"></text></g><g><title>std::__get_helper&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (12 samples, 0.16%)</title><rect x="64.5808%" y="85" width="0.1636%" height="15" fill="rgb(211,50,8)"/><text x="64.8308%" y="95.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (198 samples, 2.70%)</title><rect x="64.2127%" y="101" width="2.6994%" height="15" fill="rgb(245,182,24)"/><text x="64.4627%" y="111.50">st..</text></g><g><title>std::get&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (159 samples, 2.17%)</title><rect x="64.7444%" y="85" width="2.1677%" height="15" fill="rgb(242,14,37)"/><text x="64.9944%" y="95.50">s..</text></g><g><title>std::__get_helper&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (114 samples, 1.55%)</title><rect x="65.3579%" y="69" width="1.5542%" height="15" fill="rgb(246,228,12)"/><text x="65.6079%" y="79.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_head (60 samples, 0.82%)</title><rect x="66.0941%" y="53" width="0.8180%" height="15" fill="rgb(213,55,15)"/><text x="66.3441%" y="63.50"></text></g><g><title>std::_Head_base&lt;0ul, file_back_buffer::impl*, false&gt;::_M_head (35 samples, 0.48%)</title><rect x="66.4349%" y="37" width="0.4772%" height="15" fill="rgb(209,9,3)"/><text x="66.6849%" y="47.50"></text></g><g><title>file_back_buffer::pop_n (797 samples, 10.87%)</title><rect x="56.3872%" y="165" width="10.8657%" height="15" fill="rgb(230,59,30)"/><text x="56.6372%" y="175.50">file_back_buffer..</text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::operator (278 samples, 3.79%)</title><rect x="63.4628%" y="149" width="3.7900%" height="15" fill="rgb(209,121,21)"/><text x="63.7128%" y="159.50">std:..</text></g><g><title> (278 samples, 3.79%)</title><rect x="63.4628%" y="133" width="3.7900%" height="15" fill="rgb(220,109,13)"/><text x="63.7128%" y="143.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::get (240 samples, 3.27%)</title><rect x="63.9809%" y="117" width="3.2720%" height="15" fill="rgb(232,18,1)"/><text x="64.2309%" y="127.50">std..</text></g><g><title>std::get&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (25 samples, 0.34%)</title><rect x="66.9121%" y="101" width="0.3408%" height="15" fill="rgb(215,41,42)"/><text x="67.1621%" y="111.50"></text></g><g><title>fvec_pop_end (16 samples, 0.22%)</title><rect x="67.2529%" y="165" width="0.2181%" height="15" fill="rgb(224,123,36)"/><text x="67.5029%" y="175.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::pop_back (932 samples, 12.71%)</title><rect x="55.0648%" y="181" width="12.7062%" height="15" fill="rgb(240,125,3)"/><text x="55.3148%" y="191.50">file_vector&lt;unsigne..</text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::operator (22 samples, 0.30%)</title><rect x="67.4710%" y="165" width="0.2999%" height="15" fill="rgb(205,98,50)"/><text x="67.7210%" y="175.50"></text></g><g><title> (22 samples, 0.30%)</title><rect x="67.4710%" y="149" width="0.2999%" height="15" fill="rgb(205,185,37)"/><text x="67.7210%" y="159.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::size (19 samples, 0.26%)</title><rect x="67.7710%" y="181" width="0.2590%" height="15" fill="rgb(238,207,15)"/><text x="68.0210%" y="191.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::pop_back (1,109 samples, 15.12%)</title><rect x="53.6333%" y="197" width="15.1193%" height="15" fill="rgb(213,199,42)"/><text x="53.8833%" y="207.50">fixed_spill_vector&lt;unsi..</text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::size (53 samples, 0.72%)</title><rect x="68.0300%" y="181" width="0.7226%" height="15" fill="rgb(235,201,11)"/><text x="68.2800%" y="191.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::size (12 samples, 0.16%)</title><rect x="68.5890%" y="165" width="0.1636%" height="15" fill="rgb(207,46,11)"/><text x="68.8390%" y="175.50"></text></g><g><title>__GI__IO_fwrite (32 samples, 0.44%)</title><rect x="69.4615%" y="133" width="0.4363%" height="15" fill="rgb(241,35,35)"/><text x="69.7115%" y="143.50"></text></g><g><title>_IO_new_file_xsputn (11 samples, 0.15%)</title><rect x="69.7478%" y="117" width="0.1500%" height="15" fill="rgb(243,32,47)"/><text x="69.9978%" y="127.50"></text></g><g><title>fvec_push_whole_buffer (49 samples, 0.67%)</title><rect x="69.2434%" y="149" width="0.6680%" height="15" fill="rgb(247,202,23)"/><text x="69.4934%" y="159.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (8 samples, 0.11%)</title><rect x="70.0068%" y="117" width="0.1091%" height="15" fill="rgb(219,102,11)"/><text x="70.2568%" y="127.50"></text></g><g><title>std::__uniq_ptr_impl&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_ptr (20 samples, 0.27%)</title><rect x="70.1295%" y="101" width="0.2727%" height="15" fill="rgb(243,110,44)"/><text x="70.3795%" y="111.50"></text></g><g><title>std::get&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (14 samples, 0.19%)</title><rect x="70.2113%" y="85" width="0.1909%" height="15" fill="rgb(222,74,54)"/><text x="70.4613%" y="95.50"></text></g><g><title>std::__get_helper&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt; (11 samples, 0.15%)</title><rect x="70.2522%" y="69" width="0.1500%" height="15" fill="rgb(216,99,12)"/><text x="70.5022%" y="79.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, file_back_buffer::impl*, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::_M_head (8 samples, 0.11%)</title><rect x="70.2931%" y="53" width="0.1091%" height="15" fill="rgb(226,22,26)"/><text x="70.5431%" y="63.50"></text></g><g><title>file_back_buffer::push_buf (99 samples, 1.35%)</title><rect x="69.0661%" y="165" width="1.3497%" height="15" fill="rgb(217,163,10)"/><text x="69.3161%" y="175.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::operator (31 samples, 0.42%)</title><rect x="69.9932%" y="149" width="0.4226%" height="15" fill="rgb(213,25,53)"/><text x="70.2432%" y="159.50"></text></g><g><title> (31 samples, 0.42%)</title><rect x="69.9932%" y="133" width="0.4226%" height="15" fill="rgb(252,105,26)"/><text x="70.2432%" y="143.50"></text></g><g><title>std::unique_ptr&lt;file_back_buffer::impl, std::default_delete&lt;file_back_buffer::impl&gt; &gt;::get (22 samples, 0.30%)</title><rect x="70.1159%" y="117" width="0.2999%" height="15" fill="rgb(220,39,43)"/><text x="70.3659%" y="127.50"></text></g><g><title>file_vector&lt;unsigned long&gt;::push_back (112 samples, 1.53%)</title><rect x="68.9298%" y="181" width="1.5269%" height="15" fill="rgb(229,68,48)"/><text x="69.1798%" y="191.50"></text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::push_back (133 samples, 1.81%)</title><rect x="68.7526%" y="197" width="1.8132%" height="15" fill="rgb(252,8,32)"/><text x="69.0026%" y="207.50">f..</text></g><g><title>fixed_spill_vector&lt;unsigned long, 10485760ul&gt;::size (14 samples, 0.19%)</title><rect x="70.5658%" y="197" width="0.1909%" height="15" fill="rgb(223,20,43)"/><text x="70.8158%" y="207.50"></text></g><g><title>span&lt;unsigned char&gt;::operator[] (130 samples, 1.77%)</title><rect x="70.7566%" y="197" width="1.7723%" height="15" fill="rgb(229,81,49)"/><text x="71.0066%" y="207.50">s..</text></g><g><title>span&lt;unsigned char&gt;::size (47 samples, 0.64%)</title><rect x="72.5290%" y="197" width="0.6408%" height="15" fill="rgb(236,28,36)"/><text x="72.7790%" y="207.50"></text></g><g><title>std::swap&lt;unsigned char&gt; (1,940 samples, 26.45%)</title><rect x="73.2652%" y="197" width="26.4485%" height="15" fill="rgb(249,185,26)"/><text x="73.5152%" y="207.50">std::swap&lt;unsigned char&gt;</text></g><g><title>std::move&lt;unsigned char&amp;&gt; (29 samples, 0.40%)</title><rect x="99.3183%" y="181" width="0.3954%" height="15" fill="rgb(249,174,33)"/><text x="99.5683%" y="191.50"></text></g><g><title>rng::unshuffle&lt;unsigned char, rng::drng&gt; (6,083 samples, 82.93%)</title><rect x="16.8507%" y="213" width="82.9312%" height="15" fill="rgb(233,201,37)"/><text x="17.1007%" y="223.50">rng::unshuffle&lt;unsigned char, rng::drng&gt;</text></g><g><title>__libc_start_main (6,611 samples, 90.13%)</title><rect x="9.8160%" y="277" width="90.1295%" height="15" fill="rgb(221,78,26)"/><text x="10.0660%" y="287.50">__libc_start_main</text></g><g><title>main (6,611 samples, 90.13%)</title><rect x="9.8160%" y="261" width="90.1295%" height="15" fill="rgb(250,127,30)"/><text x="10.0660%" y="271.50">main</text></g><g><title>do_work (6,611 samples, 90.13%)</title><rect x="9.8160%" y="245" width="90.1295%" height="15" fill="rgb(230,49,44)"/><text x="10.0660%" y="255.50">do_work</text></g><g><title>work::xshuffle_ip&lt;true&gt; (6,611 samples, 90.13%)</title><rect x="9.8160%" y="229" width="90.1295%" height="15" fill="rgb(229,67,23)"/><text x="10.0660%" y="239.50">work::xshuffle_ip&lt;true&gt;</text></g><g><title>_start (6,616 samples, 90.20%)</title><rect x="9.7614%" y="293" width="90.1977%" height="15" fill="rgb(249,83,47)"/><text x="10.0114%" y="303.50">_start</text></g><g><title>all (7,335 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="335.50"></text></g><g><title>shuffle3-debug (7,335 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="319.50">shuffle3-debug</text></g></svg></svg>