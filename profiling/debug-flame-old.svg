<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>__GI__IO_free_backup_area (28 samples, 0.30%)</title><rect x="0.1703%" y="261" width="0.2980%" height="15" fill="rgb(227,0,7)"/><text x="0.4203%" y="271.50"></text></g><g><title>__GI__IO_sgetn (30 samples, 0.32%)</title><rect x="0.4683%" y="261" width="0.3193%" height="15" fill="rgb(217,0,24)"/><text x="0.7183%" y="271.50"></text></g><g><title>__GI__IO_switch_to_get_mode (23 samples, 0.24%)</title><rect x="0.7876%" y="261" width="0.2448%" height="15" fill="rgb(221,193,54)"/><text x="1.0376%" y="271.50"></text></g><g><title>__GI___libc_free (14 samples, 0.15%)</title><rect x="1.0324%" y="261" width="0.1490%" height="15" fill="rgb(248,212,6)"/><text x="1.2824%" y="271.50"></text></g><g><title>__lseek64 (85 samples, 0.90%)</title><rect x="1.1814%" y="261" width="0.9046%" height="15" fill="rgb(208,68,35)"/><text x="1.4314%" y="271.50"></text></g><g><title>new_do_write (15 samples, 0.16%)</title><rect x="2.1818%" y="261" width="0.1596%" height="15" fill="rgb(232,128,0)"/><text x="2.4318%" y="271.50"></text></g><g><title>[[heap]] (224 samples, 2.38%)</title><rect x="0.0000%" y="277" width="2.3840%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="287.50">[[..</text></g><g><title>__GI__IO_file_overflow (12 samples, 0.13%)</title><rect x="2.4798%" y="261" width="0.1277%" height="15" fill="rgb(228,23,34)"/><text x="2.7298%" y="271.50"></text></g><g><title>__GI__IO_file_seekoff (30 samples, 0.32%)</title><rect x="2.6075%" y="261" width="0.3193%" height="15" fill="rgb(218,30,26)"/><text x="2.8575%" y="271.50"></text></g><g><title>_ar_file_set (23 samples, 0.24%)</title><rect x="2.9906%" y="261" width="0.2448%" height="15" fill="rgb(220,122,19)"/><text x="3.2406%" y="271.50"></text></g><g><title>[[stack]] (116 samples, 1.23%)</title><rect x="2.3840%" y="277" width="1.2346%" height="15" fill="rgb(250,228,42)"/><text x="2.6340%" y="287.50"></text></g><g><title>_IO_file_xsgetn (31 samples, 0.33%)</title><rect x="3.6186%" y="261" width="0.3299%" height="15" fill="rgb(240,193,28)"/><text x="3.8686%" y="271.50"></text></g><g><title>_IO_seekoff_unlocked (17 samples, 0.18%)</title><rect x="3.9485%" y="261" width="0.1809%" height="15" fill="rgb(216,20,37)"/><text x="4.1985%" y="271.50"></text></g><g><title>[anon] (53 samples, 0.56%)</title><rect x="3.6186%" y="277" width="0.5641%" height="15" fill="rgb(206,188,39)"/><text x="3.8686%" y="287.50"></text></g><g><title>_IO_new_file_xsputn (68 samples, 0.72%)</title><rect x="4.1826%" y="261" width="0.7237%" height="15" fill="rgb(217,207,13)"/><text x="4.4326%" y="271.50"></text></g><g><title>[libc-2.32.so] (72 samples, 0.77%)</title><rect x="4.1826%" y="277" width="0.7663%" height="15" fill="rgb(231,73,38)"/><text x="4.4326%" y="287.50"></text></g><g><title>_IO_file_xsgetn (17 samples, 0.18%)</title><rect x="5.0128%" y="261" width="0.1809%" height="15" fill="rgb(225,20,46)"/><text x="5.2628%" y="271.50"></text></g><g><title>_IO_new_file_write (40 samples, 0.43%)</title><rect x="5.2469%" y="261" width="0.4257%" height="15" fill="rgb(210,31,41)"/><text x="5.4969%" y="271.50"></text></g><g><title>_IO_new_file_xsputn (19 samples, 0.20%)</title><rect x="5.6726%" y="261" width="0.2022%" height="15" fill="rgb(221,200,47)"/><text x="5.9226%" y="271.50"></text></g><g><title>_IO_seekoff_unlocked (16 samples, 0.17%)</title><rect x="5.8748%" y="261" width="0.1703%" height="15" fill="rgb(226,26,5)"/><text x="6.1248%" y="271.50"></text></g><g><title>__GI__IO_default_xsputn (15 samples, 0.16%)</title><rect x="6.0451%" y="261" width="0.1596%" height="15" fill="rgb(249,33,26)"/><text x="6.2951%" y="271.50"></text></g><g><title>__GI__IO_file_overflow (27 samples, 0.29%)</title><rect x="6.2048%" y="261" width="0.2874%" height="15" fill="rgb(235,183,28)"/><text x="6.4548%" y="271.50"></text></g><g><title>__GI__IO_file_seekoff (151 samples, 1.61%)</title><rect x="6.4921%" y="261" width="1.6071%" height="15" fill="rgb(221,5,38)"/><text x="6.7421%" y="271.50"></text></g><g><title>__GI__IO_fread (43 samples, 0.46%)</title><rect x="8.0992%" y="261" width="0.4576%" height="15" fill="rgb(247,18,42)"/><text x="8.3492%" y="271.50"></text></g><g><title>__GI__IO_fwrite (275 samples, 2.93%)</title><rect x="8.5568%" y="261" width="2.9268%" height="15" fill="rgb(241,131,45)"/><text x="8.8068%" y="271.50">__..</text></g><g><title>__GI___libc_malloc (11 samples, 0.12%)</title><rect x="11.6220%" y="261" width="0.1171%" height="15" fill="rgb(249,31,29)"/><text x="11.8720%" y="271.50"></text></g><g><title>__GI___libc_write (48 samples, 0.51%)</title><rect x="11.7390%" y="261" width="0.5109%" height="15" fill="rgb(225,111,53)"/><text x="11.9890%" y="271.50"></text></g><g><title>__GI___read (109 samples, 1.16%)</title><rect x="12.2499%" y="261" width="1.1601%" height="15" fill="rgb(238,160,17)"/><text x="12.4999%" y="271.50"></text></g><g><title>__GI_fseek (40 samples, 0.43%)</title><rect x="13.4100%" y="261" width="0.4257%" height="15" fill="rgb(214,148,48)"/><text x="13.6600%" y="271.50"></text></g><g><title>__lseek64 (119 samples, 1.27%)</title><rect x="13.8357%" y="261" width="1.2665%" height="15" fill="rgb(232,36,49)"/><text x="14.0857%" y="271.50"></text></g><g><title>_int_free (26 samples, 0.28%)</title><rect x="15.1980%" y="261" width="0.2767%" height="15" fill="rgb(209,103,24)"/><text x="15.4480%" y="271.50"></text></g><g><title>ar_set (18 samples, 0.19%)</title><rect x="15.5172%" y="261" width="0.1916%" height="15" fill="rgb(229,88,8)"/><text x="15.7672%" y="271.50"></text></g><g><title>new_do_write (130 samples, 1.38%)</title><rect x="15.7088%" y="261" width="1.3836%" height="15" fill="rgb(213,181,19)"/><text x="15.9588%" y="271.50"></text></g><g><title>[unknown] (1,142 samples, 12.15%)</title><rect x="4.9915%" y="277" width="12.1541%" height="15" fill="rgb(254,191,54)"/><text x="5.2415%" y="287.50">[unknown]</text></g><g><title>_IO_file_xsgetn (11 samples, 0.12%)</title><rect x="17.1456%" y="277" width="0.1171%" height="15" fill="rgb(241,83,37)"/><text x="17.3956%" y="287.50"></text></g><g><title>__GI__IO_default_xsputn (13 samples, 0.14%)</title><rect x="17.2946%" y="277" width="0.1384%" height="15" fill="rgb(233,36,39)"/><text x="17.5446%" y="287.50"></text></g><g><title>_IO_file_xsgetn (12 samples, 0.13%)</title><rect x="18.3802%" y="149" width="0.1277%" height="15" fill="rgb(226,3,54)"/><text x="18.6302%" y="159.50"></text></g><g><title>__GI__IO_fread (26 samples, 0.28%)</title><rect x="18.2418%" y="165" width="0.2767%" height="15" fill="rgb(245,192,40)"/><text x="18.4918%" y="175.50"></text></g><g><title>__GI_fseek (111 samples, 1.18%)</title><rect x="18.6888%" y="165" width="1.1814%" height="15" fill="rgb(238,167,29)"/><text x="18.9388%" y="175.50"></text></g><g><title>__GI__IO_file_seekoff (71 samples, 0.76%)</title><rect x="19.1145%" y="149" width="0.7556%" height="15" fill="rgb(232,182,51)"/><text x="19.3645%" y="159.50"></text></g><g><title>__lseek64 (46 samples, 0.49%)</title><rect x="19.3806%" y="133" width="0.4896%" height="15" fill="rgb(231,60,39)"/><text x="19.6306%" y="143.50"></text></g><g><title>_int_free (13 samples, 0.14%)</title><rect x="19.8702%" y="165" width="0.1384%" height="15" fill="rgb(208,69,12)"/><text x="20.1202%" y="175.50"></text></g><g><title>ar_get (197 samples, 2.10%)</title><rect x="17.9332%" y="197" width="2.0966%" height="15" fill="rgb(235,93,37)"/><text x="18.1832%" y="207.50">a..</text></g><g><title>_ar_file_get (190 samples, 2.02%)</title><rect x="18.0077%" y="181" width="2.0221%" height="15" fill="rgb(213,116,39)"/><text x="18.2577%" y="191.50">_..</text></g><g><title>minmax_floats (214 samples, 2.28%)</title><rect x="17.7948%" y="213" width="2.2776%" height="15" fill="rgb(222,207,29)"/><text x="18.0448%" y="223.50">m..</text></g><g><title>__GI__IO_fread (13 samples, 0.14%)</title><rect x="20.1469%" y="165" width="0.1384%" height="15" fill="rgb(206,96,30)"/><text x="20.3969%" y="175.50"></text></g><g><title>__GI_fseek (29 samples, 0.31%)</title><rect x="20.3172%" y="165" width="0.3086%" height="15" fill="rgb(218,138,4)"/><text x="20.5672%" y="175.50"></text></g><g><title>__GI__IO_file_seekoff (17 samples, 0.18%)</title><rect x="20.4449%" y="149" width="0.1809%" height="15" fill="rgb(250,191,14)"/><text x="20.6949%" y="159.50"></text></g><g><title>__lseek64 (11 samples, 0.12%)</title><rect x="20.5087%" y="133" width="0.1171%" height="15" fill="rgb(239,60,40)"/><text x="20.7587%" y="143.50"></text></g><g><title>minmax_int64_ts (61 samples, 0.65%)</title><rect x="20.0724%" y="213" width="0.6492%" height="15" fill="rgb(206,27,48)"/><text x="20.3224%" y="223.50"></text></g><g><title>ar_get (61 samples, 0.65%)</title><rect x="20.0724%" y="197" width="0.6492%" height="15" fill="rgb(225,35,8)"/><text x="20.3224%" y="207.50"></text></g><g><title>_ar_file_get (56 samples, 0.60%)</title><rect x="20.1256%" y="181" width="0.5960%" height="15" fill="rgb(250,213,24)"/><text x="20.3756%" y="191.50"></text></g><g><title>_IO_file_xsgetn (26 samples, 0.28%)</title><rect x="21.8391%" y="149" width="0.2767%" height="15" fill="rgb(247,123,22)"/><text x="22.0891%" y="159.50"></text></g><g><title>__GI__IO_fread (59 samples, 0.63%)</title><rect x="21.5198%" y="165" width="0.6279%" height="15" fill="rgb(231,138,38)"/><text x="21.7698%" y="175.50"></text></g><g><title>__GI___libc_free (17 samples, 0.18%)</title><rect x="22.1477%" y="165" width="0.1809%" height="15" fill="rgb(231,145,46)"/><text x="22.3977%" y="175.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.27%)</title><rect x="22.3287%" y="165" width="0.2661%" height="15" fill="rgb(251,118,11)"/><text x="22.5787%" y="175.50"></text></g><g><title>_IO_seekoff_unlocked (20 samples, 0.21%)</title><rect x="23.7654%" y="149" width="0.2129%" height="15" fill="rgb(217,147,25)"/><text x="24.0154%" y="159.50"></text></g><g><title>__GI__IO_free_backup_area (15 samples, 0.16%)</title><rect x="24.7765%" y="133" width="0.1596%" height="15" fill="rgb(247,81,37)"/><text x="25.0265%" y="143.50"></text></g><g><title>__GI_fseek (314 samples, 3.34%)</title><rect x="22.5947%" y="165" width="3.3418%" height="15" fill="rgb(209,12,38)"/><text x="22.8447%" y="175.50">__G..</text></g><g><title>__GI__IO_file_seekoff (184 samples, 1.96%)</title><rect x="23.9783%" y="149" width="1.9583%" height="15" fill="rgb(227,1,9)"/><text x="24.2283%" y="159.50">_..</text></g><g><title>__lseek64 (94 samples, 1.00%)</title><rect x="24.9361%" y="133" width="1.0004%" height="15" fill="rgb(248,47,43)"/><text x="25.1861%" y="143.50"></text></g><g><title>_int_free (32 samples, 0.34%)</title><rect x="25.9472%" y="165" width="0.3406%" height="15" fill="rgb(221,10,30)"/><text x="26.1972%" y="175.50"></text></g><g><title>ar_get (519 samples, 5.52%)</title><rect x="20.9132%" y="197" width="5.5236%" height="15" fill="rgb(210,229,1)"/><text x="21.1632%" y="207.50">ar_get</text></g><g><title>_ar_file_get (503 samples, 5.35%)</title><rect x="21.0834%" y="181" width="5.3533%" height="15" fill="rgb(222,148,37)"/><text x="21.3334%" y="191.50">_ar_fil..</text></g><g><title>minmax_sbytes (548 samples, 5.83%)</title><rect x="20.7216%" y="213" width="5.8323%" height="15" fill="rgb(234,67,33)"/><text x="20.9716%" y="223.50">minmax_..</text></g><g><title>ar_size (11 samples, 0.12%)</title><rect x="26.4368%" y="197" width="0.1171%" height="15" fill="rgb(247,98,35)"/><text x="26.6868%" y="207.50"></text></g><g><title>ar_set (36 samples, 0.38%)</title><rect x="27.4691%" y="197" width="0.3831%" height="15" fill="rgb(247,138,52)"/><text x="27.7191%" y="207.50"></text></g><g><title>_IO_file_xsgetn (47 samples, 0.50%)</title><rect x="31.6837%" y="133" width="0.5002%" height="15" fill="rgb(213,79,30)"/><text x="31.9337%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.15%)</title><rect x="32.0349%" y="117" width="0.1490%" height="15" fill="rgb(246,177,23)"/><text x="32.2849%" y="127.50"></text></g><g><title>__GI__IO_fread (118 samples, 1.26%)</title><rect x="31.0345%" y="149" width="1.2559%" height="15" fill="rgb(230,62,27)"/><text x="31.2845%" y="159.50"></text></g><g><title>__GI__IO_sgetn (10 samples, 0.11%)</title><rect x="32.1839%" y="133" width="0.1064%" height="15" fill="rgb(216,154,8)"/><text x="32.4339%" y="143.50"></text></g><g><title>__GI___libc_free (58 samples, 0.62%)</title><rect x="32.2903%" y="149" width="0.6173%" height="15" fill="rgb(244,35,45)"/><text x="32.5403%" y="159.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.34%)</title><rect x="32.9076%" y="149" width="0.3406%" height="15" fill="rgb(251,115,12)"/><text x="33.1576%" y="159.50"></text></g><g><title>_IO_seekoff_unlocked (20 samples, 0.21%)</title><rect x="33.9506%" y="133" width="0.2129%" height="15" fill="rgb(240,54,50)"/><text x="34.2006%" y="143.50"></text></g><g><title>__GI__IO_free_backup_area (17 samples, 0.18%)</title><rect x="36.2920%" y="117" width="0.1809%" height="15" fill="rgb(233,84,52)"/><text x="36.5420%" y="127.50"></text></g><g><title>__GI___read (159 samples, 1.69%)</title><rect x="36.4730%" y="117" width="1.6922%" height="15" fill="rgb(207,117,47)"/><text x="36.7230%" y="127.50"></text></g><g><title>__GI_fseek (622 samples, 6.62%)</title><rect x="33.2482%" y="149" width="6.6198%" height="15" fill="rgb(249,43,39)"/><text x="33.4982%" y="159.50">__GI_fseek</text></g><g><title>__GI__IO_file_seekoff (536 samples, 5.70%)</title><rect x="34.1635%" y="133" width="5.7046%" height="15" fill="rgb(209,38,44)"/><text x="34.4135%" y="143.50">__GI__I..</text></g><g><title>__lseek64 (160 samples, 1.70%)</title><rect x="38.1652%" y="117" width="1.7029%" height="15" fill="rgb(236,212,23)"/><text x="38.4152%" y="127.50"></text></g><g><title>_int_free (62 samples, 0.66%)</title><rect x="39.9425%" y="149" width="0.6599%" height="15" fill="rgb(242,79,21)"/><text x="40.1925%" y="159.50"></text></g><g><title>ar_get (1,054 samples, 11.22%)</title><rect x="29.5658%" y="181" width="11.2175%" height="15" fill="rgb(211,96,35)"/><text x="29.8158%" y="191.50">ar_get</text></g><g><title>_ar_file_get (1,023 samples, 10.89%)</title><rect x="29.8957%" y="165" width="10.8876%" height="15" fill="rgb(253,215,40)"/><text x="30.1457%" y="175.50">_ar_file_get</text></g><g><title>__memmove_avx_unaligned_erms (20 samples, 0.21%)</title><rect x="41.4645%" y="165" width="0.2129%" height="15" fill="rgb(211,81,21)"/><text x="41.7145%" y="175.50"></text></g><g><title>_IO_file_xsgetn (44 samples, 0.47%)</title><rect x="44.4977%" y="117" width="0.4683%" height="15" fill="rgb(208,190,38)"/><text x="44.7477%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.12%)</title><rect x="44.8489%" y="101" width="0.1171%" height="15" fill="rgb(235,213,38)"/><text x="45.0989%" y="111.50"></text></g><g><title>__GI__IO_fread (132 samples, 1.40%)</title><rect x="43.7527%" y="133" width="1.4049%" height="15" fill="rgb(237,122,38)"/><text x="44.0027%" y="143.50"></text></g><g><title>__GI__IO_sgetn (18 samples, 0.19%)</title><rect x="44.9659%" y="117" width="0.1916%" height="15" fill="rgb(244,218,35)"/><text x="45.2159%" y="127.50"></text></g><g><title>__GI___libc_free (61 samples, 0.65%)</title><rect x="45.1575%" y="133" width="0.6492%" height="15" fill="rgb(240,68,47)"/><text x="45.4075%" y="143.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.30%)</title><rect x="45.8067%" y="133" width="0.2980%" height="15" fill="rgb(210,16,53)"/><text x="46.0567%" y="143.50"></text></g><g><title>_IO_seekoff_unlocked (20 samples, 0.21%)</title><rect x="46.6794%" y="117" width="0.2129%" height="15" fill="rgb(235,124,12)"/><text x="46.9294%" y="127.50"></text></g><g><title>[libc-2.32.so] (21 samples, 0.22%)</title><rect x="49.1166%" y="85" width="0.2235%" height="15" fill="rgb(224,169,11)"/><text x="49.3666%" y="95.50"></text></g><g><title>__GI__IO_free_backup_area (88 samples, 0.94%)</title><rect x="49.0528%" y="101" width="0.9366%" height="15" fill="rgb(250,166,2)"/><text x="49.3028%" y="111.50"></text></g><g><title>__GI___libc_free (61 samples, 0.65%)</title><rect x="49.3401%" y="85" width="0.6492%" height="15" fill="rgb(242,216,29)"/><text x="49.5901%" y="95.50"></text></g><g><title>_IO_new_file_write (245 samples, 2.61%)</title><rect x="51.1814%" y="53" width="2.6075%" height="15" fill="rgb(230,116,27)"/><text x="51.4314%" y="63.50">_I..</text></g><g><title>__GI___libc_write (147 samples, 1.56%)</title><rect x="52.2244%" y="37" width="1.5645%" height="15" fill="rgb(228,99,48)"/><text x="52.4744%" y="47.50"></text></g><g><title>_IO_new_do_write (477 samples, 5.08%)</title><rect x="50.3193%" y="85" width="5.0766%" height="15" fill="rgb(253,11,6)"/><text x="50.5693%" y="95.50">_IO_ne..</text></g><g><title>new_do_write (472 samples, 5.02%)</title><rect x="50.3725%" y="69" width="5.0234%" height="15" fill="rgb(247,143,39)"/><text x="50.6225%" y="79.50">new_do..</text></g><g><title>__lseek64 (149 samples, 1.59%)</title><rect x="53.8101%" y="53" width="1.5858%" height="15" fill="rgb(236,97,10)"/><text x="54.0601%" y="63.50"></text></g><g><title>__GI__IO_switch_to_get_mode (519 samples, 5.52%)</title><rect x="49.9894%" y="101" width="5.5236%" height="15" fill="rgb(233,208,19)"/><text x="50.2394%" y="111.50">__GI__I..</text></g><g><title>__GI__IO_file_overflow (11 samples, 0.12%)</title><rect x="55.3959%" y="85" width="0.1171%" height="15" fill="rgb(216,164,2)"/><text x="55.6459%" y="95.50"></text></g><g><title>__GI___read (153 samples, 1.63%)</title><rect x="55.5130%" y="101" width="1.6284%" height="15" fill="rgb(220,129,5)"/><text x="55.7630%" y="111.50"></text></g><g><title>__GI_fseek (1,166 samples, 12.41%)</title><rect x="46.1047%" y="133" width="12.4095%" height="15" fill="rgb(242,17,10)"/><text x="46.3547%" y="143.50">__GI_fseek</text></g><g><title>__GI__IO_file_seekoff (1,092 samples, 11.62%)</title><rect x="46.8923%" y="117" width="11.6220%" height="15" fill="rgb(242,107,0)"/><text x="47.1423%" y="127.50">__GI__IO_file_see..</text></g><g><title>__lseek64 (129 samples, 1.37%)</title><rect x="57.1413%" y="101" width="1.3729%" height="15" fill="rgb(251,28,31)"/><text x="57.3913%" y="111.50"></text></g><g><title>_init (45 samples, 0.48%)</title><rect x="58.5143%" y="133" width="0.4789%" height="15" fill="rgb(233,223,10)"/><text x="58.7643%" y="143.50"></text></g><g><title>_int_free (74 samples, 0.79%)</title><rect x="58.9932%" y="133" width="0.7876%" height="15" fill="rgb(215,21,27)"/><text x="59.2432%" y="143.50"></text></g><g><title>ar_get (1,715 samples, 18.25%)</title><rect x="41.7092%" y="165" width="18.2524%" height="15" fill="rgb(232,23,21)"/><text x="41.9592%" y="175.50">ar_get</text></g><g><title>_ar_file_get (1,687 samples, 17.95%)</title><rect x="42.0072%" y="149" width="17.9544%" height="15" fill="rgb(244,5,23)"/><text x="42.2572%" y="159.50">_ar_file_get</text></g><g><title>ar_get_into (1,803 samples, 19.19%)</title><rect x="40.7833%" y="181" width="19.1890%" height="15" fill="rgb(226,81,46)"/><text x="41.0333%" y="191.50">ar_get_into</text></g><g><title>_IO_new_do_write (10 samples, 0.11%)</title><rect x="71.0515%" y="117" width="0.1064%" height="15" fill="rgb(247,70,30)"/><text x="71.3015%" y="127.50"></text></g><g><title>__GI__IO_default_xsputn (104 samples, 1.11%)</title><rect x="71.1579%" y="117" width="1.1069%" height="15" fill="rgb(212,68,19)"/><text x="71.4079%" y="127.50"></text></g><g><title>__GI__IO_fwrite (974 samples, 10.37%)</title><rect x="62.7927%" y="149" width="10.3661%" height="15" fill="rgb(240,187,13)"/><text x="63.0427%" y="159.50">__GI__IO_fwrite</text></g><g><title>_IO_new_file_xsputn (566 samples, 6.02%)</title><rect x="67.1350%" y="133" width="6.0238%" height="15" fill="rgb(223,113,26)"/><text x="67.3850%" y="143.50">_IO_new_..</text></g><g><title>__GI__IO_file_overflow (84 samples, 0.89%)</title><rect x="72.2648%" y="117" width="0.8940%" height="15" fill="rgb(206,192,2)"/><text x="72.5148%" y="127.50"></text></g><g><title>_IO_seekoff_unlocked (44 samples, 0.47%)</title><rect x="74.5743%" y="133" width="0.4683%" height="15" fill="rgb(241,108,4)"/><text x="74.8243%" y="143.50"></text></g><g><title>__GI__IO_file_read (12 samples, 0.13%)</title><rect x="79.3316%" y="117" width="0.1277%" height="15" fill="rgb(247,173,49)"/><text x="79.5816%" y="127.50"></text></g><g><title>[libc-2.32.so] (25 samples, 0.27%)</title><rect x="79.6828%" y="101" width="0.2661%" height="15" fill="rgb(224,114,35)"/><text x="79.9328%" y="111.50"></text></g><g><title>__GI__IO_free_backup_area (123 samples, 1.31%)</title><rect x="79.5445%" y="117" width="1.3091%" height="15" fill="rgb(245,159,27)"/><text x="79.7945%" y="127.50"></text></g><g><title>__GI___libc_free (85 samples, 0.90%)</title><rect x="79.9489%" y="101" width="0.9046%" height="15" fill="rgb(245,172,44)"/><text x="80.1989%" y="111.50"></text></g><g><title>_IO_new_file_write (239 samples, 2.54%)</title><rect x="81.9817%" y="69" width="2.5436%" height="15" fill="rgb(236,23,11)"/><text x="82.2317%" y="79.50">_I..</text></g><g><title>__GI___libc_write (146 samples, 1.55%)</title><rect x="82.9715%" y="53" width="1.5539%" height="15" fill="rgb(205,117,38)"/><text x="83.2215%" y="63.50"></text></g><g><title>_IO_new_do_write (492 samples, 5.24%)</title><rect x="81.0451%" y="101" width="5.2363%" height="15" fill="rgb(237,72,25)"/><text x="81.2951%" y="111.50">_IO_ne..</text></g><g><title>new_do_write (482 samples, 5.13%)</title><rect x="81.1516%" y="85" width="5.1298%" height="15" fill="rgb(244,70,9)"/><text x="81.4016%" y="95.50">new_do..</text></g><g><title>__lseek64 (162 samples, 1.72%)</title><rect x="84.5573%" y="69" width="1.7241%" height="15" fill="rgb(217,125,39)"/><text x="84.8073%" y="79.50"></text></g><g><title>__GI__IO_switch_to_get_mode (524 samples, 5.58%)</title><rect x="80.8536%" y="117" width="5.5768%" height="15" fill="rgb(235,36,10)"/><text x="81.1036%" y="127.50">__GI__I..</text></g><g><title>__GI__IO_file_overflow (14 samples, 0.15%)</title><rect x="86.2814%" y="101" width="0.1490%" height="15" fill="rgb(251,123,47)"/><text x="86.5314%" y="111.50"></text></g><g><title>__GI___read (294 samples, 3.13%)</title><rect x="86.4304%" y="117" width="3.1290%" height="15" fill="rgb(221,13,13)"/><text x="86.6804%" y="127.50">__G..</text></g><g><title>__GI_fseek (1,837 samples, 19.55%)</title><rect x="73.1588%" y="149" width="19.5509%" height="15" fill="rgb(238,131,9)"/><text x="73.4088%" y="159.50">__GI_fseek</text></g><g><title>__GI__IO_file_seekoff (1,660 samples, 17.67%)</title><rect x="75.0426%" y="133" width="17.6671%" height="15" fill="rgb(211,50,8)"/><text x="75.2926%" y="143.50">__GI__IO_file_seekoff</text></g><g><title>__lseek64 (296 samples, 3.15%)</title><rect x="89.5594%" y="117" width="3.1503%" height="15" fill="rgb(245,182,24)"/><text x="89.8094%" y="127.50">__l..</text></g><g><title>ar_swap (6,142 samples, 65.37%)</title><rect x="27.8523%" y="197" width="65.3682%" height="15" fill="rgb(242,14,37)"/><text x="28.1023%" y="207.50">ar_swap</text></g><g><title>ar_set (3,124 samples, 33.25%)</title><rect x="59.9723%" y="181" width="33.2482%" height="15" fill="rgb(246,228,12)"/><text x="60.2223%" y="191.50">ar_set</text></g><g><title>_ar_file_set (3,031 samples, 32.26%)</title><rect x="60.9621%" y="165" width="32.2584%" height="15" fill="rgb(213,55,15)"/><text x="61.2121%" y="175.50">_ar_file_set</text></g><g><title>fwrite@plt (41 samples, 0.44%)</title><rect x="92.7842%" y="149" width="0.4364%" height="15" fill="rgb(209,9,3)"/><text x="93.0342%" y="159.50"></text></g><g><title>[libm-2.32.so] (18 samples, 0.19%)</title><rect x="94.3806%" y="181" width="0.1916%" height="15" fill="rgb(230,59,30)"/><text x="94.6306%" y="191.50"></text></g><g><title>rand (89 samples, 0.95%)</title><rect x="95.3491%" y="165" width="0.9472%" height="15" fill="rgb(209,121,21)"/><text x="95.5991%" y="175.50"></text></g><g><title>__random (89 samples, 0.95%)</title><rect x="95.3491%" y="149" width="0.9472%" height="15" fill="rgb(220,109,13)"/><text x="95.5991%" y="159.50"></text></g><g><title>__random_r (60 samples, 0.64%)</title><rect x="95.6577%" y="133" width="0.6386%" height="15" fill="rgb(232,18,1)"/><text x="95.9077%" y="143.50"></text></g><g><title>_next (164 samples, 1.75%)</title><rect x="94.5722%" y="181" width="1.7454%" height="15" fill="rgb(215,41,42)"/><text x="94.8222%" y="191.50"></text></g><g><title>[libm-2.32.so] (87 samples, 0.93%)</title><rect x="97.1584%" y="133" width="0.9259%" height="15" fill="rgb(224,123,36)"/><text x="97.4084%" y="143.50"></text></g><g><title>dot (20 samples, 0.21%)</title><rect x="98.0843%" y="133" width="0.2129%" height="15" fill="rgb(240,125,3)"/><text x="98.3343%" y="143.50"></text></g><g><title>fract (24 samples, 0.26%)</title><rect x="98.2971%" y="133" width="0.2554%" height="15" fill="rgb(205,98,50)"/><text x="98.5471%" y="143.50"></text></g><g><title>next (205 samples, 2.18%)</title><rect x="96.3814%" y="165" width="2.1818%" height="15" fill="rgb(205,185,37)"/><text x="96.6314%" y="175.50">n..</text></g><g><title>sample_double (165 samples, 1.76%)</title><rect x="96.8072%" y="149" width="1.7561%" height="15" fill="rgb(238,207,15)"/><text x="97.0572%" y="159.50"></text></g><g><title>[libm-2.32.so] (64 samples, 0.68%)</title><rect x="98.7974%" y="149" width="0.6811%" height="15" fill="rgb(213,199,42)"/><text x="99.0474%" y="159.50"></text></g><g><title>dot (27 samples, 0.29%)</title><rect x="99.4785%" y="149" width="0.2874%" height="15" fill="rgb(235,201,11)"/><text x="99.7285%" y="159.50"></text></g><g><title>fract (16 samples, 0.17%)</title><rect x="99.7659%" y="149" width="0.1703%" height="15" fill="rgb(207,46,11)"/><text x="100.0159%" y="159.50"></text></g><g><title>_sample (341 samples, 3.63%)</title><rect x="96.3176%" y="181" width="3.6292%" height="15" fill="rgb(241,35,35)"/><text x="96.5676%" y="191.50">_sam..</text></g><g><title>sample_double (130 samples, 1.38%)</title><rect x="98.5632%" y="165" width="1.3836%" height="15" fill="rgb(243,32,47)"/><text x="98.8132%" y="175.50"></text></g><g><title>shuffle (6,898 samples, 73.41%)</title><rect x="26.5751%" y="213" width="73.4142%" height="15" fill="rgb(247,202,23)"/><text x="26.8251%" y="223.50">shuffle</text></g><g><title>rng_next_int (636 samples, 6.77%)</title><rect x="93.2205%" y="197" width="6.7688%" height="15" fill="rgb(219,102,11)"/><text x="93.4705%" y="207.50">rng_next_..</text></g><g><title>all (9,396 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="319.50"></text></g><g><title>shuffle3-debug (9,396 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="303.50">shuffle3-debug</text></g><g><title>_start (7,735 samples, 82.32%)</title><rect x="17.6777%" y="277" width="82.3223%" height="15" fill="rgb(216,99,12)"/><text x="17.9277%" y="287.50">_start</text></g><g><title>__libc_start_main (7,731 samples, 82.28%)</title><rect x="17.7203%" y="261" width="82.2797%" height="15" fill="rgb(226,22,26)"/><text x="17.9703%" y="271.50">__libc_start_main</text></g><g><title>main (7,731 samples, 82.28%)</title><rect x="17.7203%" y="245" width="82.2797%" height="15" fill="rgb(217,163,10)"/><text x="17.9703%" y="255.50">main</text></g><g><title>shuffle3 (7,731 samples, 82.28%)</title><rect x="17.7203%" y="229" width="82.2797%" height="15" fill="rgb(213,25,53)"/><text x="17.9703%" y="239.50">shuffle3</text></g></svg></svg>